{smcl}
{txt}{sf}{ul off}{.-}
       log:  {res}C:\Users\n06017\Documents\SugarSync Shared Folders\Andrew Bernard\Concordance\cn_pc_hs_yearly\2003\output\CN8_PC8_HS6_cross_section_2003.smcl
  {txt}log type:  {res}smcl
 {txt}opened on:  {res} 3 Jul 2012, 16:46:05
{txt}
{com}. 
. * Base files for concordance: Eurostat Ramon server:
.         * List of CN8 codes in the chosen year
.         * List of PC8 codes in the chosen year (only mandatory codes)
.         * Concordance file CN8-PC8 in the chosen year
.         * Structure file Prodcom for the chosen year (format can differ in different years)
.         * The first three files have been translated into usable stata format prior to running this do-file
.                 
.         
. * Basic procedure:
.         * First 6d of CN8 are HS6
.         * Concordance file CN8 - PC8 only contains CN8 and PC8 codes 
.                 * covered by both classifications
.         * By merging the CN8 and PC8 list with the concordance, it is 
.                 * possible to identify CN8 codes not covered by PC8 and vice versa
.         * Loop to identify feedback effects: based on Pierce & Schott (2012, forthcoming)
.         
. ***************************************
. *** 1/ Concordance from PC8 to HS6+ ***
. ***************************************
. 
. * A/ Reading in concordance and reduce to PC8-HS6:
. 
.         use "`yr'\cn_pc_`yr'.dta", clear
{txt}
{com}.                 
.                 drop if cn`yr'=="" | pc`yr'==""
{txt}(0 observations deleted)

{com}.                 gen hs6=substr(cn`yr', 1, 6)
{txt}
{com}.                 drop cn`yr'
{txt}
{com}.         
.                 sort hs6 pc`yr'
{txt}
{com}.                 keep hs6 pc`yr'
{txt}
{com}.                 
.                 count
{res}10027
{txt}
{com}.                 duplicates drop

{p 0 4}{txt}Duplicates in terms of {txt} all variables{p_end}

(3715 observations deleted)

{com}.                 count
{res} 6312
{txt}
{com}.         
.                 * count # of unique PC8 codes
.                         * Note: some of these codes are more aggregated than 
.                         * on the original PC8 list (Z-codes, T-codes)
.                         * before concording, some codes in production data need to be recoded
.                         * in these aggregate codes
.                         * cfr. readme file  
.                         sort pc`yr'
{txt}
{com}.                         count if pc`yr'!=pc`yr'[_n-1]
{res} 4379
{txt}
{com}.                         
.                 * count # of unique HS6 codes
.                         * Note: the number of codes is less than in original HS classification, 
.                                 * not all CN8 codes are covered by PC8
.                                                         
.                         sort hs6
{txt}
{com}.                         count if hs6!=hs6[_n-1]
{res} 4815
{txt}
{com}.                         
.                         
. * B/ Identify types of codes PC8-HS6 (one-many, many-one, many-many)
.                 * one-many and many-many mappings will result in groups of HS6 codes (HS6+ codes)
.                 
.         * Identify many-to-one codes PC-HS:
.         * Note: for now, these include many-to-many codes, correction below
.                 sort hs6 pc`yr'
{txt}
{com}.                 gen temp=1 if hs6==hs6[_n-1 ]& pc`yr'!=pc`yr'[_n-1]
{txt}(4815 missing values generated)

{com}.                 by hs6: egen many_one=max(temp)
{txt}(3944 missing values generated)

{com}.                 replace many_one=0 if many_one==.
{txt}(3944 real changes made)

{com}.                 drop temp
{txt}
{com}. 
.         * Identify one-to-many codes PC-HS:
.         * Note: for now, these include many-to-many codes, correction below
.                 
.                 sort pc`yr' hs6
{txt}
{com}.                 gen temp=1 if pc`yr'==pc`yr'[_n-1 ]& hs6!=hs6[_n-1]
{txt}(4379 missing values generated)

{com}.                 by pc`yr': egen one_many=max(temp)
{txt}(3609 missing values generated)

{com}.                 replace one_many=0 if one_many==.
{txt}(3609 real changes made)

{com}.                 drop temp
{txt}
{com}. 
.         * identify many-to-many codes:
.                 gen temp=1 if many_one==1 & one_many==1
{txt}(5423 missing values generated)

{com}.                 sort hs6
{txt}
{com}.                 by hs6: egen temp2=max(temp)
{txt}(5157 missing values generated)

{com}.                 sort pc`yr'
{txt}
{com}.                 by pc`yr': egen many_many=max(temp2)
{txt}(4974 missing values generated)

{com}.                 replace many_many=0 if many_many==.
{txt}(4974 real changes made)

{com}. 
.         * Identify simple codes:
.                 gen simple=0
{txt}
{com}.                 replace simple=1 if many_one==0 & one_many==0
{txt}(2130 real changes made)

{com}. 
.         * Correction one-to-many and many-to-one coding:
.         * many-to-many codes need to be taken out.
.                 replace one_many=0 if many_many==1
{txt}(1072 real changes made)

{com}.                 replace many_one=0 if many_many==1
{txt}(1155 real changes made)

{com}.                 drop temp temp2
{txt}
{com}.                 
.         save "`yr'\temp", replace
{txt}(note: file 2003\temp.dta not found)
file 2003\temp.dta saved

{com}. 
.         * Count types:
.                 
.                 use "`yr'\temp", clear
{txt}
{com}.                         sort pc`yr'
{txt}
{com}.                         keep if pc`yr'!=pc`yr'[_n-1]
{txt}(1933 observations deleted)

{com}.                         count
{res} 4379
{txt}
{com}.                         tab one_many

   {txt}one_many {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
          0 {c |}{res}      3,919       89.50       89.50
{txt}          1 {c |}{res}        460       10.50      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}      4,379      100.00
{txt}
{com}.                         tab many_one

   {txt}many_one {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
          0 {c |}{res}      3,166       72.30       72.30
{txt}          1 {c |}{res}      1,213       27.70      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}      4,379      100.00
{txt}
{com}.                         tab many_many

  {txt}many_many {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
          0 {c |}{res}      3,803       86.85       86.85
{txt}          1 {c |}{res}        576       13.15      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}      4,379      100.00
{txt}
{com}.                         tab simple

     {txt}simple {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
          0 {c |}{res}      2,249       51.36       51.36
{txt}          1 {c |}{res}      2,130       48.64      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}      4,379      100.00
{txt}
{com}.         
.                 use "`yr'\temp", clear
{txt}
{com}.                         sort hs6
{txt}
{com}.                         keep if hs6!=hs6[_n-1]
{txt}(1497 observations deleted)

{com}.                         count
{res} 4815
{txt}
{com}.                         tab one_many

   {txt}one_many {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
          0 {c |}{res}      3,184       66.13       66.13
{txt}          1 {c |}{res}      1,631       33.87      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}      4,815      100.00
{txt}
{com}.                         tab many_one

   {txt}many_one {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
          0 {c |}{res}      4,394       91.26       91.26
{txt}          1 {c |}{res}        421        8.74      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}      4,815      100.00
{txt}
{com}.                         tab many_many

  {txt}many_many {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
          0 {c |}{res}      4,182       86.85       86.85
{txt}          1 {c |}{res}        633       13.15      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}      4,815      100.00
{txt}
{com}.                         tab simple

     {txt}simple {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
          0 {c |}{res}      2,685       55.76       55.76
{txt}          1 {c |}{res}      2,130       44.24      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}      4,815      100.00
{txt}
{com}.                 
.                 
. * C/ Create groupings (assign setyr to different mappings)
.         * these setyr's will only be final after identification loop below
.                 
.         use "`yr'\temp", clear
{txt}
{com}. 
.                  sort one_many many_one
{txt}
{com}.                          * create groupings for one_many:
.                          egen tmp=group(pc`yr') if one_many==1
{txt}(4681 missing values generated)

{com}.          
.                  * create groupings for many_one:
.                         * Numbering needs to start after numbering for one_many
.                          egen tmpno=max(tmp)
{txt}
{com}.                          if tmpno==. {c -(}
.                                  * if there are no 1-M groups
.                                  drop tmpno
.                                  gen tmpno=0
.                                         {c )-}
{txt}
{com}.                                  
.                          egen tmp2=group(hs6) if many_one==1 
{txt}(5099 missing values generated)

{com}.                          gen tmp3=tmpno + tmp2 
{txt}(5099 missing values generated)

{com}.                          drop tmpno
{txt}
{com}.  
.                  * create groupings for many_many:
.                          * Numbering needs to start after numbering for many_one
.                         egen tmpno=max(tmp3)
{txt}
{com}.                         if tmpno==. {c -(}
.                                 * if there are no M-1 groups
.                                 drop tmpno
.                                 egen tmpno=max(tmp)
.                                 {c )-}
{txt}
{com}.                         if tmpno==. {c -(}
.                                 * if there are no 1-M groups
.                                 drop tmpno
.                                 gen tmpno=0
.                                         {c )-}
{txt}
{com}.                         egen tmp4=group(hs6) if many_many==1
{txt}(4974 missing values generated)

{com}.                                  * we could group on pc`yr' here as well, needs to be checked for feedback effects anyway
.                         gen tmp5=tmpno + tmp4 
{txt}(4974 missing values generated)

{com}.                         drop tmpno
{txt}
{com}.         
.                  * for simple codes, we assign a setyr to the simple change:
.                         egen tmpno=max(tmp5)
{txt}
{com}.                         if tmpno==. {c -(}
.                               * if there are no M-M groups
.                               drop tmpno
.                               egen tmpno=max(tmp3)
.                                {c )-}
{txt}
{com}.                         if tmpno==. {c -(}
.                               * if there are no M-1 groups
.                               drop tmpno
.                               egen tmpno=max(tmp)
.                                {c )-}
{txt}
{com}.                         if tmpno==. {c -(}
.                               * if there are no 1-M groups
.                          drop tmpno
.                                gen tmpno=0
.                          {c )-}
{txt}
{com}.                         egen tmp6=group(hs6) if simple==1
{txt}(4182 missing values generated)

{com}.                         gen tmp7=tmpno + tmp6
{txt}(4182 missing values generated)

{com}.                         drop tmpno
{txt}
{com}.   
.                         egen code=rowtotal(tmp tmp3 tmp5 tmp7)
{txt}
{com}.                         drop tmp tmp2-tmp7
{txt}
{com}.                
.          
. * D/ loop to identify feedback effects M-M groupings within each year 
.                 * Based on Pierce and Schott (2009, NBER 14837)
.         * Explanation of loop:
.                 * function mod(`zzz', 2) is used to switch even and odd turns in the loop
.                 * modulus(x,y) = x - y * int(x/y)
.                 * equal to 0 if zzz=2, 4, 6, 8, ... 
.                 * different from 0 for zzz=3, 5, 7, ...
.                 * each time the setyr's are grouped by new or obsolete
.                 * equivalent to sorting in excel by new and obsolete
.                 * to identify feedback effects
. 
.                  bysort pc`yr': egen c1 = min(code)
{txt}
{com}.                 * assign min setyr by pc`yr' (we grouped by hs6 above for M-M)
.                  local zzz = 2
{txt}
{com}.                  local stop = 0
{txt}
{com}.                  while `stop'==0 {c -(}
{txt}  2{com}.                  noisily display [`zzz']
{txt}  3{com}.                  local zlag = `zzz'-1
{txt}  4{com}.                  if mod(`zzz',2)==0 {c -(}
{txt}  5{com}.                         bysort hs6: egen c`zzz'= min(c`zlag')
{txt}  6{com}.                   {c )-}
{txt}  7{com}.                  if mod(`zzz',2)~=0 {c -(}
{txt}  8{com}.                         bysort pc`yr': egen c`zzz'= min(c`zlag')
{txt}  9{com}.                   {c )-}
{txt} 10{com}.          
.                  compare c`zzz' c`zlag'
{txt} 11{com}.                  gen idx = c`zzz'==c`zlag'
{txt} 12{com}.                  tab idx
{txt} 13{com}.                  local stop = r(r)==1
{txt} 14{com}.                  local zzz = `zzz'+1
{txt} 15{com}.                  display r(r) " " [`stop']
{txt} 16{com}.                  drop idx
{txt} 17{com}.                  {c )-}
2

{txt}{col 41}{hline 10} difference {hline 10}
{col 29}count{col 41}minimum{col 54}average{col 66}maximum
{hline 72}
c2<c1                   {res}      429           -63    -6.736597          -1
{txt}c2=c1                   {res}     5883
{txt}{col 24}{hline 10}
jointly defined         {res}     6312           -63     -.457858           0
{txt}{col 24}{hline 10}
total                   {res}     6312

        {txt}idx {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
          0 {c |}{res}        429        6.80        6.80
{txt}          1 {c |}{res}      5,883       93.20      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}      6,312      100.00
2 0
3

{txt}{col 41}{hline 10} difference {hline 10}
{col 29}count{col 41}minimum{col 54}average{col 66}maximum
{hline 72}
c3<c2                   {res}       87           -50    -12.16092          -1
{txt}c3=c2                   {res}     6225
{txt}{col 24}{hline 10}
jointly defined         {res}     6312           -50    -.1676172           0
{txt}{col 24}{hline 10}
total                   {res}     6312

        {txt}idx {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
          0 {c |}{res}         87        1.38        1.38
{txt}          1 {c |}{res}      6,225       98.62      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}      6,312      100.00
2 0
4

{txt}{col 41}{hline 10} difference {hline 10}
{col 29}count{col 41}minimum{col 54}average{col 66}maximum
{hline 72}
c4<c3                   {res}       19           -50    -12.42105          -1
{txt}c4=c3                   {res}     6293
{txt}{col 24}{hline 10}
jointly defined         {res}     6312           -50    -.0373891           0
{txt}{col 24}{hline 10}
total                   {res}     6312

        {txt}idx {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
          0 {c |}{res}         19        0.30        0.30
{txt}          1 {c |}{res}      6,293       99.70      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}      6,312      100.00
2 0
5

{txt}{col 41}{hline 10} difference {hline 10}
{col 29}count{col 41}minimum{col 54}average{col 66}maximum
{hline 72}
c5<c4                   {res}       37           -35    -9.648649          -1
{txt}c5=c4                   {res}     6275
{txt}{col 24}{hline 10}
jointly defined         {res}     6312           -35    -.0565589           0
{txt}{col 24}{hline 10}
total                   {res}     6312

        {txt}idx {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
          0 {c |}{res}         37        0.59        0.59
{txt}          1 {c |}{res}      6,275       99.41      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}      6,312      100.00
2 0
6

{txt}{col 41}{hline 10} difference {hline 10}
{col 29}count{col 41}minimum{col 54}average{col 66}maximum
{hline 72}
c6<c5                   {res}       10           -35        -13.1          -2
{txt}c6=c5                   {res}     6302
{txt}{col 24}{hline 10}
jointly defined         {res}     6312           -35    -.0207541           0
{txt}{col 24}{hline 10}
total                   {res}     6312

        {txt}idx {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
          0 {c |}{res}         10        0.16        0.16
{txt}          1 {c |}{res}      6,302       99.84      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}      6,312      100.00
2 0
7

{txt}{col 41}{hline 10} difference {hline 10}
{col 29}count{col 41}minimum{col 54}average{col 66}maximum
{hline 72}
c7<c6                   {res}       31           -35    -8.290323          -2
{txt}c7=c6                   {res}     6281
{txt}{col 24}{hline 10}
jointly defined         {res}     6312           -35    -.0407161           0
{txt}{col 24}{hline 10}
total                   {res}     6312

        {txt}idx {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
          0 {c |}{res}         31        0.49        0.49
{txt}          1 {c |}{res}      6,281       99.51      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}      6,312      100.00
2 0
8

{txt}{col 41}{hline 10} difference {hline 10}
{col 29}count{col 41}minimum{col 54}average{col 66}maximum
{hline 72}
c8<c7                   {res}        6           -35        -11.5          -2
{txt}c8=c7                   {res}     6306
{txt}{col 24}{hline 10}
jointly defined         {res}     6312           -35    -.0109316           0
{txt}{col 24}{hline 10}
total                   {res}     6312

        {txt}idx {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
          0 {c |}{res}          6        0.10        0.10
{txt}          1 {c |}{res}      6,306       99.90      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}      6,312      100.00
2 0
9

{txt}{col 41}{hline 10} difference {hline 10}
{col 29}count{col 41}minimum{col 54}average{col 66}maximum
{hline 72}
c9<c8                   {res}        6           -35          -26          -8
{txt}c9=c8                   {res}     6306
{txt}{col 24}{hline 10}
jointly defined         {res}     6312           -35    -.0247148           0
{txt}{col 24}{hline 10}
total                   {res}     6312

        {txt}idx {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
          0 {c |}{res}          6        0.10        0.10
{txt}          1 {c |}{res}      6,306       99.90      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}      6,312      100.00
2 0
10

{txt}{col 41}{hline 10} difference {hline 10}
{col 29}count{col 41}minimum{col 54}average{col 66}maximum
{hline 72}
c10<c9                  {res}        1           -35          -35         -35
{txt}c10=c9                  {res}     6311
{txt}{col 24}{hline 10}
jointly defined         {res}     6312           -35     -.005545           0
{txt}{col 24}{hline 10}
total                   {res}     6312

        {txt}idx {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
          0 {c |}{res}          1        0.02        0.02
{txt}          1 {c |}{res}      6,311       99.98      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}      6,312      100.00
2 0
11

{txt}{col 41}{hline 10} difference {hline 10}
{col 29}count{col 41}minimum{col 54}average{col 66}maximum
{hline 72}
c11<c10                 {res}        3           -35          -35         -35
{txt}c11=c10                 {res}     6309
{txt}{col 24}{hline 10}
jointly defined         {res}     6312           -35     -.016635           0
{txt}{col 24}{hline 10}
total                   {res}     6312

        {txt}idx {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
          0 {c |}{res}          3        0.05        0.05
{txt}          1 {c |}{res}      6,309       99.95      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}      6,312      100.00
2 0
12

{txt}{col 41}{hline 10} difference {hline 10}
{col 29}count{col 41}minimum{col 54}average{col 66}maximum
{hline 72}
c12<c11                 {res}        1           -35          -35         -35
{txt}c12=c11                 {res}     6311
{txt}{col 24}{hline 10}
jointly defined         {res}     6312           -35     -.005545           0
{txt}{col 24}{hline 10}
total                   {res}     6312

        {txt}idx {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
          0 {c |}{res}          1        0.02        0.02
{txt}          1 {c |}{res}      6,311       99.98      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}      6,312      100.00
2 0
13

{txt}{col 41}{hline 10} difference {hline 10}
{col 29}count{col 41}minimum{col 54}average{col 66}maximum
{hline 72}
c13=c12                 {res}     6312
{txt}{col 24}{hline 10}
jointly defined         {res}     6312             0            0           0
{txt}{col 24}{hline 10}
total                   {res}     6312

        {txt}idx {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
          1 {c |}{res}      6,312      100.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}      6,312      100.00
1 1
{txt}
{com}.   
.         local yyy = `zzz' - 1
{txt}
{com}.         gen setyr = c`yyy'
{txt}
{com}.         drop c1-c`yyy'
{txt}
{com}.  
.         * Verify coding:
.                 * counts should equal zero in both cases
.                 
.                sort pc`yr' 
{txt}
{com}.                count if pc`yr'==pc`yr'[_n-1] & setyr!=setyr[_n-1]
{res}    0
{txt}
{com}.          
.                sort hs6
{txt}
{com}.                count if hs6==hs6[_n-1] & setyr!=setyr[_n-1]
{res}    0
{txt}
{com}.           
.         * recode, so setyr are numbered consecutively 
.                sort setyr
{txt}
{com}.                egen setyr2=group(setyr)
{txt}
{com}.                drop setyr 
{txt}
{com}.                rename setyr2 setyr
{txt}
{com}.                
.                sort setyr
{txt}
{com}.                count if setyr!=setyr[_n-1]
{res} 3142
{txt}
{com}.         
.         save "`yr'\pc8_hs6_`yr'", replace
{txt}(note: file 2003\pc8_hs6_2003.dta not found)
file 2003\pc8_hs6_2003.dta saved

{com}.                 * this file provides a list of all PC8 codes and corresponding HS6+ code
.                         
.                 
. * E/ CREATE CONCORDANCE SPECIFIC TO DOM PROD DATA  
. 
.         use "`yr'\pc8_hs6_`yr'", clear
{txt}
{com}.                 * we need variable setyr equal to HS6 if only one HS6 code in that setyr
.                 
.                 * how many hs6+ codes and how many codes per group?
.                 sort hs6
{txt}
{com}.                 egen tmp = group(hs6)
{txt}
{com}.                 bysort setyr: egen nhs = count(tmp)
{txt}
{com}.                 sort setyr
{txt}
{com}.                 tab nhs if setyr!=setyr[_n-1]

        {txt}nhs {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
          1 {c |}{res}      2,130       67.79       67.79
{txt}          2 {c |}{res}        478       15.21       83.00
{txt}          3 {c |}{res}        208        6.62       89.62
{txt}          4 {c |}{res}        125        3.98       93.60
{txt}          5 {c |}{res}         42        1.34       94.94
{txt}          6 {c |}{res}         36        1.15       96.09
{txt}          7 {c |}{res}         17        0.54       96.63
{txt}          8 {c |}{res}         30        0.95       97.58
{txt}          9 {c |}{res}          9        0.29       97.87
{txt}         10 {c |}{res}         15        0.48       98.35
{txt}         11 {c |}{res}          6        0.19       98.54
{txt}         12 {c |}{res}          6        0.19       98.73
{txt}         13 {c |}{res}          2        0.06       98.79
{txt}         14 {c |}{res}          5        0.16       98.95
{txt}         15 {c |}{res}          3        0.10       99.05
{txt}         16 {c |}{res}          5        0.16       99.20
{txt}         17 {c |}{res}          1        0.03       99.24
{txt}         18 {c |}{res}          3        0.10       99.33
{txt}         19 {c |}{res}          1        0.03       99.36
{txt}         20 {c |}{res}          2        0.06       99.43
{txt}         21 {c |}{res}          1        0.03       99.46
{txt}         22 {c |}{res}          4        0.13       99.59
{txt}         23 {c |}{res}          1        0.03       99.62
{txt}         24 {c |}{res}          3        0.10       99.71
{txt}         27 {c |}{res}          1        0.03       99.75
{txt}         28 {c |}{res}          3        0.10       99.84
{txt}         31 {c |}{res}          1        0.03       99.87
{txt}         37 {c |}{res}          1        0.03       99.90
{txt}         44 {c |}{res}          1        0.03       99.94
{txt}         61 {c |}{res}          1        0.03       99.97
{txt}        109 {c |}{res}          1        0.03      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}      3,142      100.00
{txt}
{com}.                 
.                 drop tmp
{txt}
{com}.                 gen tmp=setyr
{txt}
{com}.                 tostring setyr, replace
{txt}setyr was {res:float} now {res:str4}

{com}.                 replace setyr=hs6 if nhs==1
{txt}setyr was {res}str4{txt} now {res}str6
{txt}(2130 real changes made)

{com}.                 
.                 keep pc`yr' setyr
{txt}
{com}.                 duplicates drop

{p 0 4}{txt}Duplicates in terms of {txt} all variables{p_end}

(1933 observations deleted)

{com}.                 sort pc`yr'     
{txt}
{com}.                 rename setyr hs6plus
{txt}
{com}.         saveold "`yr'\output\concordance_pc8_hs6plus_`yr'", replace
{txt}(note: file 2003\output\concordance_pc8_hs6plus_2003.dta not found)
file 2003\output\concordance_pc8_hs6plus_2003.dta saved

{com}.         outsheet using "`yr'\output\concordance_pc8_hs6plus_`yr'.csv", replace
{txt}(note: file 2003\output\concordance_pc8_hs6plus_2003.csv not found)

{com}. 
. * F/ List of PC8 codes not covered in concordance (auxiliary file)
.         * we need to generate a list of PC8 codes that features in concordance, but not in PC8 list
.                 * This file can be used to find the aggregated (Z) codes and all PC8 codes not covered by CN8
.                 * To identify the aggregates, the Prodcom structure file can be used
.                 * End of PDF file: list of Z-aggregates (NACE 99.z)
.                 * List of PC8 codes not covered by CN8 + PC8 codes that need to be recoded in aggregates
.                         * Based on the auxiliary file generated here and Prodcom List for `yr' to identify codes and aggregates:
.                         * PC8_`yr'_special_codes
.                 
.                 use "`yr'\pc_`yr'", clear
{txt}
{com}.                         rename pc pc`yr'
{txt}
{com}.                         sort pc`yr'
{txt}
{com}.                 save "`yr'\temp", replace
{txt}file 2003\temp.dta saved

{com}.         
.                 use "`yr'\output\concordance_pc8_hs6plus_`yr'", clear
{txt}
{com}.                         sort pc`yr'
{txt}
{com}.                         merge pc`yr' using "`yr'\temp"
{txt}
{com}.                                 * _m==1 are codes that feature in concordance, not on PC8 list
.                                 * these are the aggregated codes (Z-codes)
.                                 * _m==2 are industrial services + breakdowns of Z-aggregates
.                         keep if _m==1 | _m==2
{txt}(4265 observations deleted)

{com}.                         tab _m

     {txt}_merge {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
          1 {c |}{res}        114       21.03       21.03
{txt}          2 {c |}{res}        428       78.97      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}        542      100.00
{txt}
{com}.                 saveold "`yr'\output\PC8_`yr'_not_in_concordance", replace
{txt}(note: file 2003\output\PC8_2003_not_in_concordance.dta not found)
file 2003\output\PC8_2003_not_in_concordance.dta saved

{com}.                 outsheet using "`yr'\output\PC8_`yr'_not_in_concordance.csv", replace
{txt}(note: file 2003\output\PC8_2003_not_in_concordance.csv not found)

{com}. 
. ***************************************
. *** 2/ Concordance from CN8 to HS6+ ***
. ***************************************
.  /* In principle: first 6d of CN8 are HS6.
>                 Trade data simply needs to be collapsed (aggregated to HS6+ level).
>                 But: suppose: CN8 #1 and CN8 #2 both map into particular HS6 code
>                 CN8 #1: covered by PC8 List
>                 CN8 #2: not covered by PC8 list
>                 In that case, the HS6 code is only partially covered by the Prodcom List
>                 Prior to concording trade data to HS6+, all CN8 codes not covered by Prodcom List need to be dropped!
>                 Codes are identified in concordance file (cfr. infra).
>                 */
. 
. 
. * A/ Read in file with ALL CN8 codes for `yr'
.         * including CN8 codes not covered by PC8 classification
.         
.         use "`yr'\CN_`yr'", replace
{txt}
{com}.                 duplicates drop

{p 0 4}{txt}Duplicates in terms of {txt} all variables{p_end}

(0 observations are duplicates)

{com}.                 sort cn`yr'
{txt}
{com}.                 count
{res}10404
{txt}
{com}.                 save "`yr'\temp", replace
{txt}file 2003\temp.dta saved

{com}.                         * Number of unique CN8 codes in year `yr'
.                         
. * B/ Merge concordance file CN8-PC8 with file with ALL CN8 codes  
.                 * identification of CN8 codes not on the Prodcom List
.                 
.         use "`yr'\cn_pc_`yr'", clear
{txt}
{com}.                 drop if cn`yr'=="" | pc`yr'==""
{txt}(0 observations deleted)

{com}.                 keep cn`yr'
{txt}
{com}.                 duplicates drop

{p 0 4}{txt}Duplicates in terms of {txt} all variables{p_end}

(495 observations deleted)

{com}.                 sort cn`yr'
{txt}
{com}.                 merge cn`yr' using "`yr'\temp"
{txt}
{com}.                 tab _m

     {txt}_merge {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
          1 {c |}{res}          2        0.02        0.02
{txt}          2 {c |}{res}        874        8.40        8.42
{txt}          3 {c |}{res}      9,530       91.58      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}     10,406      100.00
{txt}
{com}.                         * _m==2 implies CN8 codes not on PC8 list
.                 gen notpc = 0
{txt}
{com}.                 replace notpc = 1 if _m==2
{txt}(874 real changes made)

{com}.                         label var notpc "CN8 not covered by PC8"
{txt}
{com}.                 drop _m
{txt}
{com}.                 gen hs6 = substr(cn`yr', 1, 6)
{txt}
{com}.                 tab notpc

    {txt}CN8 not {c |}
 covered by {c |}
        PC8 {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
          0 {c |}{res}      9,532       91.60       91.60
{txt}          1 {c |}{res}        874        8.40      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}     10,406      100.00
{txt}
{com}.                         * notpc=1 means that these CN8 products are not covered by the Prodcom List in `yr'.
.                         * These CN8 products do not feature in concordance file CN8-PC8 for `yr'
.                         * They have to be dropped from the trade data before concording 
.                         
.                 sort hs6 notpc
{txt}
{com}.                 count if hs6==hs6[_n-1] & notpc!=notpc[_n-1]
{res}   94
{txt}
{com}.                         * # HS6 codes that have some CN8 code(s) that are on the PC8 list and some CN8 codes not on the PC8 list
.                         
.                 sort hs6
{txt}
{com}.         save "`yr'\output\concordance_cn8_hs6plus_`yr'", replace
{txt}(note: file 2003\output\concordance_cn8_hs6plus_2003.dta not found)
file 2003\output\concordance_cn8_hs6plus_2003.dta saved

{com}.                 * This concordance takes into account which CN8 codes need to be dropped before aggregating to HS6
.                 * But does not yet identify the HS6+ groups
. 
. * C/ Assign HS6+ codes to CN8 codes
.         * take into account that some HS6 codes need to be grouped 
.         * as a result of many-many and one-many matches between PC8 and HS6
.         * If groups of HS6 codes are grouped on production side
.         * They also need to be grouped on the trade side
.                         
.         use "`yr'\pc8_hs6_`yr'", clear
{txt}
{com}.                 * if setyr only groups one HS6 code
.                 * replace setyr with HS6 code
.         
.                 sort hs6
{txt}
{com}.                 drop if hs6==hs6[_n-1]
{txt}(1497 observations deleted)

{com}.                 egen tmp = group(hs6)
{txt}
{com}.                 bysort setyr: egen tmp2 = count(tmp)
{txt}
{com}.                 tostring setyr, replace
{txt}setyr was {res:float} now {res:str4}

{com}.                 replace setyr = hs6 if tmp2==1
{txt}setyr was {res}str4{txt} now {res}str6
{txt}(2551 real changes made)

{com}.                 keep hs6 setyr 
{txt}
{com}.                 duplicates drop

{p 0 4}{txt}Duplicates in terms of {txt} all variables{p_end}

(0 observations are duplicates)

{com}.                 sort hs6
{txt}
{com}.         save "`yr'\temp", replace
{txt}file 2003\temp.dta saved

{com}.                 * List of HS6 codes and corresponding HS6+ codes (based on concordance PC8-HS6)
.                 * all codes with notpc = 1 will have to be dropped from trade data before concording
.                 * the rest will be mapped into HS6+ codes identified in concordance pc8_hs6_`yr'
. 
. 
.         use "`yr'\output\concordance_cn8_hs6plus_`yr'", clear
{txt}
{com}.                 sort hs6
{txt}
{com}.                 merge hs6 using "`yr'\temp"
{txt}{p 0 4}
variable{txt} hs6
does not uniquely identify observations in
the master data
{p_end}

{com}.                 tab _m

     {txt}_merge {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
          1 {c |}{res}        773        7.43        7.43
{txt}          3 {c |}{res}      9,633       92.57      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}     10,406      100.00
{txt}
{com}.                         *_m==1 codes are CN8 codes not on PC8 list (potentially featuring more than once)
.                 drop _m
{txt}
{com}.                 sort cn`yr'
{txt}
{com}.                 count if cn`yr'!=cn`yr'[_n-1]
{res}10406
{txt}
{com}.                 rename setyr hs6plus
{txt}
{com}.                 drop hs6
{txt}
{com}.                 duplicates drop

{p 0 4}{txt}Duplicates in terms of {txt} all variables{p_end}

(0 observations are duplicates)

{com}.         saveold "`yr'\output\concordance_cn8_hs6plus_`yr'", replace 
{txt}file 2003\output\concordance_cn8_hs6plus_2003.dta saved

{com}.         outsheet using "`yr'\output\concordance_cn8_hs6plus_`yr'.csv", replace
{txt}(note: file 2003\output\concordance_cn8_hs6plus_2003.csv not found)

{com}.                 * this is the concordance that can be used to merge with trade data
.                 * necessary steps:
.                         * merge trade data with concordance file
.                         * drop all codes where notpc==1 (CN8 codes not covered by PC8)
.                         * Cases where _m==1 (unmatched CN8 codes in data)
.                                 * these could be "residual" categories, ending or starting with 99
.                                 * or mistakes in reporting
.                                 * need to be dropped from data (no corresponding production data)
.                         
. 
. *************************************
. *** 3/ Concording production data ***
. *************************************                   
. /* Procedure:
>                 A/ Read in domestic production data
>                 B/ Recode all optional codes in the data (if applicable)
>                 C/ Merge the production data with the file "PC8_`yr'_special_codes" on variable "pc`yr'"
>                 D/ Drop all products where the "type" is "industrial services" or "no cn correspondence"
>                 E/ Recode all products where the type is "aggregate" (replace pc`yr' = new_code if type=="aggregate"
>                 F/ Merge the (recoded) production data with concordance file "concordance_pc8_hs6plus_`yr'"
>                         * In principle, all PC8 codes that appear in the data should feature in the concordance
>                         * If some PC8 codes do not feature in concordance, this could be due to reporting errors or "residual" categories
>                         * Unmatched PC8 codes in the data need to be dropped (no corresponding HS6 code)
>                 F/ Aggregate the data from (firm-)PC8 product level to (firm-)HS6+ level
> */              
. 
. /* Example using Belgian data at PC8 product level
> 
> 
>         * Optional codes: Blist and Nlist: prepare files
>                 
>                 if `yr' < 2005 {c -(}
>                         use Nlist_codes_1993_2005, clear
>                                 sort pc8
>                                 count if pc8==pc8[_n-1]
>                         save temp_nlist, replace
>                         
>                         use "`yr'\PC_`yr'_Blist", clear
>                                 tostring pc, g(pc8)
>                                 sort pc8
>                                 drop pc
>                                 merge pc8 using optional_codes_1993_2005
>                                 tab _m
>                                 drop if _m==2
>                                         * _m==1 should not occur
>                                 drop _m
>                                 duplicates drop
>                                 sort pc8
>                                 count if pc8==pc8[_n-1]
>                         save temp_blist, replace
>                         {c )-}
>                 
>         
>         * Read in production data + recode where necessary:
>         
>                 use ${c -(}hdd{c )-}production_pt_1995_2008, clear
>                                 
>                 label var lev3v_prod "Production value sold"
>                 label var prodcom "PC8 product, string"
>                 label var mioQ "Production value sold, mio"
>                         
>                 keep if year==`yr'
>                 sort prodcom
>                 count if prodcom==prodcom[_n-1]
>                 rename prodcom pc8
>                 
>                 * optional codes
>         
>                         if `yr' < 2005 {c -(}        
>                                 * merge with list of N-codes to recode if applicable
>                                         merge pc8 using temp_nlist
>                                         tab _m
>                                         capture table pc8 if _m==3, c(count lev3v_prod sum lev3v_prod sum mioQ) format(%20.2fc) row
>                                         replace pc8 = pc_mand if _m==3
>                                         drop if _m==2
>                                         drop _m pc_mand
>                                 
>                                 * merge with list of B-codes to recode if applicable
>                                         merge pc8 using temp_blist
>                                         tab _m
>                                         drop if _m==2
>                                         capture table pc8 if _m==3, c(count lev3v_prod sum lev3v_prod sum mioQ) format(%20.2fc) row
>                                         replace pc8 = pc_mand if _m==3
>                                         drop pc_mand
>                                         drop _m
>                         
>                                 {c )-}
>                                 
>                                 sort pc8
>                                 
>                                 count if pc8==pc8[_n-1]
>                                         * due to recoding, there might be doubles, need to be collapsed
>                                         * e.g. two optional codes that map into one mandatory code
>                 
>                         if `yr' < 2005 {c -(}        
>                                 collapse (sum) lev3v_prod mioQ, by(pc8)
>                                         * only mandatory PC8 codes left in the data
>                                         {c )-}
>                         
>                         sort pc8
>                         save ${c -(}hdd{c )-}production_`yr'_concorded, replace
>                                 
>                 * Special codes (industrial services, aggregates)
>                         insheet using "`yr'\PC8_`yr'_special_codes.csv", clear delimiter(";")
>                                 tostring pc`yr', g(pc8)
>                                 keep pc8 new_code type
>                                 tab type
>                                 sort pc8
>                                 count if pc8==pc8[_n-1]
>                         save temp, replace
>                         
>                         use ${c -(}hdd{c )-}production_`yr'_concorded, clear
>                                 merge pc8 using temp
>                                 tab _m
>                                 tab type if _m==3
>                                 drop if type=="industrial services" | type=="no cn correspondence"
>                                 tab type
>                                 replace pc8 = new_code if _m==3
>                                 
>                                 * there can again be doubles after recoding into aggregates
>                                         sort pc8
>                                         count if pc8==pc8[_n-1]
>                                         collapse (sum) lev3v_prod mioQ, by(pc8)
>                                                 * only mandatory and Z-aggregates, all codes should feature in concordance after this step
>                                         sort pc8
>                                         count if pc8==pc8[_n-1]
>                                         drop if lev3v_prod==0 | lev3v_prod==.
>                 
>                 * concording PC8 products into HS6+ classification
>                                 
>                         rename pc8 pc`yr'
>                         sort pc`yr'
>                         merge pc`yr' using "`yr'\output\concordance_pc8_hs6plus_`yr'"
>                         tab _m
>                         
>                         table pc`yr' if _m==1, c(sum mioQ count mioQ)
>                                         
>                         * drop PC8 products not recognized in concordance (coding errors, residual categories)
>                                 keep if _m==3
>                                         
>                         * collapse to HS6+ level if applicable
>                                 sort hs6plus 
>                                 count if hs6plus==hs6plus[_n-1]
>                                 
>                                 collapse (sum) lev3v_prod mioQ, by(hs6plus)
>                                 
>                                 sort hs6plus
>                                 count if hs6plus==hs6plus[_n-1]
>                                         * should be unique
>                                 count
>                                 
>                         save ${c -(}hdd{c )-}production_`yr'_concorded, replace   
>         */                      
.                                 
. **********************************************
. *** 4/ Concording international trade data ***
. **********************************************                  
. /* Procedure:
>                 A/ Read in international trade data
>                 B/ Merge the trade data with the file "concordance_cn8_hs6plus_`yr'" on variable "cn`yr'"
>                 C/ Drop all products where the dummy "notpc" equals one (these are CN8 products not covered by PC8)
>                         * In principle, all CN8 codes that appear in the data should feature in the concordance
>                         * If some CN8 codes do not feature in concordance, this could be due to reporting errors or "residual" categories
>                         * Unmatched CN8 codes in the data need to be dropped (no corresponding PC8 code)
>                 F/ Aggregate the data from firm-CN8 product level to firm-HS6+ level
> */                      
. 
. /* Example using Belgian trade data at CN8 product level
> 
>         use ${c -(}hdd{c )-}goods_pt_1993_2010, clear
>                                 * read in data and label vars
>                                 
>                 label var valueII "Instrastat import value"
>                 label var valueIE "Extrastat import value"
>                 label var valueXI "Intrastat export value"
>                 label var valueXE "Extrastat import value"
>                                 
>                 describe
>                 keep if year==`yr'
>                         
>                 * merge annual CN8 codes with their corresponding HS6+ code
>                         * and drop CN8 products not covered by PC8 list
>                 
>                         sort cn8 
>                         rename cn8 cn`yr'
>                         
>                         merge cn`yr' using "`yr'\output\concordance_cn8_hs6plus_`yr'"
>                         tab _m
>                         table cn`yr' if _m==1, c(sum valueII sum valueIE sum valueXE sum valueXI) format(%20.2fc) row
>                         keep if _m==3
>                         
>                         table notpc, c(sum valueII sum valueIE sum valueXE sum valueXI) format(%20.2fc) row
>                         drop if notpc==1
>                         
>                         tab year
>                         sort year hs6plus
>                         collapse (sum) valueII valueIE valueXI valueXE, by(hs6plus)
>                         sort hs6plus
>                         count if hs6plus==hs6plus[_n-1]
>                                 * should be unique
>                         count
>                         
>                 save ${c -(}hdd{c )-}goods_pt_concorded_`yr', replace
>                 */      
.                         
. *****************************************************
. *** 5/ Merging domestic production and trade data ***
. *****************************************************                   
. /* Procedure:
>                 A/ Sort international trade and production data at firm-HS6+ level
>                 B/ Merge the two data sets on (the firm identifier and) "hs6plus" (common product identifier)
> */                      
. 
. /* Example using Belgian data at product-level (HS6+)
> 
>         use ${c -(}hdd{c )-}goods_pt_concorded_`yr', clear
>                 merge hs6plus using ${c -(}hdd{c )-}production_`yr'_concorded
>                 
>                 tab _m
>                 foreach var of varlist valueII valueIE valueXI valueXE mioQ lev3v_prod {c -(}        
>                         replace `var' = 0 if `var'==.
>                         {c )-}
>                 
>         save ${c -(}hdd{c )-}trade_prod_hs6plus_`yr', replace
>         */
.         
. log close
       {txt}log:  {res}C:\Users\n06017\Documents\SugarSync Shared Folders\Andrew Bernard\Concordance\cn_pc_hs_yearly\2003\output\CN8_PC8_HS6_cross_section_2003.smcl
  {txt}log type:  {res}smcl
 {txt}closed on:  {res} 3 Jul 2012, 16:46:08
{txt}{.-}
{smcl}
{txt}{sf}{ul off}